from rest_framework.decorators import api_view
from rest_framework.response import Response
from .stu_serializer import *
from .models import *
from rest_framework.views import APIView
from rest_framework.generics import GenericAPIView,ListCreateAPIView,RetrieveUpdateDestroyAPIView
from rest_framework.mixins import ListModelMixin,CreateModelMixin,RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin


# @api_view(['GET','POST'])
# def stu_api_view1(request):
#     if request.method == 'GET':
#         stu = Student.objects.all()
#         stu_serial = Student_serializer(stu,many=True)
#         return Response(data=stu_serial.data)
#     elif request.method == 'POST':
#         stu = Student_serializer(data=request.data)
#         if stu.is_valid():
#             stu.save()
#             return Response(data="Student Added Succesfully")
#         else:
#             return Response(data=stu.errors)



# @api_view(['GET','PUT','DELETE'])
# def stu_api_view2(request,id):
#     if request.method == 'GET':
#         stu = Student.objects.get(id=id)
#         stu_serial = Student_serializer(stu)
#         return Response(data=stu_serial.data)

#     elif request.method == 'PUT':
#         id = request.data.get('id')
#         stu = Student.objects.get(id=id)
#         stu_serial = Student_serializer(stu,data=request.data)
#         if stu_serial.is_valid():
#             stu_serial.save()
#             return Response(data="Student Details Updated")
#         else:
#             return Response(data=stu_serial.errors)
    
#     elif request.method == 'DELETE':
#         Student.objects.get(id=id).delete()
#         return Response(data="Student Details Are Deleted")




# class Student_API(APIView):
#     def get(self,request,id=None):
#         if id is not None:
#             stu = Student.objects.get(id=id)
#             stu_serial = Student_serializer(stu)
#             return Response(data=stu_serial.data)
#         else:
#             stu = Student.objects.all()
#             stu_serial = Student_serializer(stu,many=True)
#             return Response(data=stu_serial.data)
    
#     def post(self,request):
#         stu_serial = Student_serializer(data=request.data)
#         if stu_serial.is_valid():
#             stu_serial.save()
#             return Response(data="Student Added")
#         else:
#             return Response(data=stu_serial.errors)
    
#     def put(self,request):
#         id = request.data.get('id')
#         stu = Student.objects.get(id=id)
#         stu_serial = Student_serializer(stu,data=request.data)
#         if stu_serial.is_valid():
#             stu_serial.save()
#             return Response(data="Student Updated")
#         else:
#             return Response(data=stu_serial.errors)
    
#     def delete(self,request,id=None):
#         if id is not None:
#             Student.objects.get(id=id).delete()
#             return Response(data="Student Details are Deleted")




# class Student_API(GenericAPIView,ListModelMixin,CreateModelMixin):
#     queryset = Student.objects.all()
#     serializer_class = Student_serializer

#     def get(self,request,*args,**kwargs):
#         return self.list(request,*args,**kwargs)
    
#     def post(self,request,*args,**kwargs):
#         return self.create(request,*args,**kwargs)


# class Student_Api(GenericAPIView,UpdateModelMixin,RetrieveModelMixin,DestroyModelMixin):
#     queryset = Student.objects.all()
#     serializer_class = Student_serializer

#     def get(self,request,*args,**kwargs):
#         return self.retrieve(request,*args,**kwargs)
    
#     def put(self,request,*args,**kwargs):
#         return self.update(request,*args,**kwargs)
    
#     def delete(self,request,*args,**kwargs):
#         return self.destroy(request,*args,**kwargs)



class StudentApi1(ListCreateAPIView):
    queryset = Student.objects.all()
    serializer_class = Student_serializer


class StudentApi2(RetrieveUpdateDestroyAPIView):
    queryset = Student.objects.all()
    serializer_class = Student_serializer
